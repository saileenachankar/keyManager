<?php

namespace keyManager\keyBundle\Form;

use Doctrine\ORM\EntityManager;
use keyManager\keyBundle\Entity\ClientNew;
use keyManager\keyBundle\Entity\tpenew;
use keyManager\keyBundle\Form\EventListener\AddClientNewFieldSubscriber;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use keyManager\keyBundle\Form\EventListener\AddTpenewFieldSubscriber;
use Symfony\Component\Validator\Constraints\Null;

class KeyNewType extends AbstractType
{
//    protected $em;
//
//    function __construct(EntityManager $em)
//    {
//        $this->em = $em;
//    }
        /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
//        $propertyPathToTpe = 'tpenew';
//        $builder
//            ->addEventSubscriber(new AddTpenewFieldSubscriber($propertyPathToTpe))
//            ->addEventSubscriber(new AddClientNewFieldSubscriber($propertyPathToTpe));


        $builder
            ->add('startDate', 'date', array('widget' => 'single_text'))
            ->add('endDate', 'date', array('widget' => 'single_text'))
            ->add('keyName')
            ->add('keyValid')
          //  ->add('tpenew', new tpenewType())

//
//            ->add('tpenew', 'entity',  array(
//                    'class'=>'keyManagerkeyBundle:tpenew',
//                    'property'=>'tpeNum',
//                    ))


           /* ->add('tpenew', 'collection', array('type'=> 'entity', 'options'=>array('class'=>'keyManagerkeyBundle:tpenew')))*/

            ->add('ajouter une clef', 'submit')
        ->addEventListener(FormEvents::PRE_SET_DATA, array($this, 'onPreSetData'))
        ->addEventListener(FormEvents::PRE_SUBMIT, array($this, 'onPreSubmit'));

//        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event)
//            {
//                $product = $event->getData();
//                $form = $event->getForm();
//
//                if ($product === $product->getStartDate()) {
//                    $form->add('tpenew', 'entity',  array(
//                            'class'=>'keyManagerkeyBundle:tpenew',
//                            'property'=>'tpeNum',
//                        ));}
//            });
//
//        $builder->get('startDate')->addEventListener(
//            FormEvents::POST_SUBMIT,
//            function (FormEvent $event)  {
//                // It's important here to fetch $event->getForm()->getData(), as
//                // $event->getData() will get you the client data (that is, the ID)
//                $sport = $event->getForm()->getData();
//
//                // since we've added the listener to the child, we'll have to pass on
//                // the parent to the callback functions!
//
//            }
//        );



    }

    protected function addElements(FormInterface $form, ClientNew  $clientNew=null)
    {
        $form->add('clientNew', 'entity', array(
                'data' => $clientNew,
                'empty_value' => '-- Choose --',
                'class' => 'keyManagerkeyBundle:ClientNew',
                'mapped' => 'false')
        );

        $tpes=array();
        if($clientNew)
        {
            $repo = $this->getEntityManager()->getRepository('keyManagerkeyBundle:tpenew');
            $tpes = $repo->findbycustom($clientNew);
        }

        $form->add('tpenew', 'entity', array(
                'empty_value' => '-- Select a client first --',
                'class' => 'keyManagerkeyBundle:tpenew',
                'choices' => $tpes,
            ));
    }

    function onPreSubmit(FormEvent $event) {
        $form = $event->getForm();
        $data = $event->getData();

        // Note that the data is not yet hydrated into the entity.
        $clientNew = $this->em->getRepository('keyManagerkeyBundle:ClientNew')->find($data['clientNew']);
        $this->addElements($form, $clientNew);
    }

    function onPreSetData(FormEvent $event) {
        $key = $event->getData();
        $form = $event->getForm();

        // We might have an empty account (when we insert a new account, for instance)
        $clientNew = $key->getTpenew() ? $key->getTpenew()->getClientNew() : null;
        $this->addElements($form, $clientNew);
    }

    /**
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => 'keyManager\keyBundle\Entity\KeyNew'
        ));
    }

    /**
     * @return string
     */
    public function getName()
    {
        return 'keymanager_keybundle_keynew';
    }


}
